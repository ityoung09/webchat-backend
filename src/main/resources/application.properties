spring.application.name=webchat-backend
#spring.profiles.active=dev
server.port=8081

# ==================== 数据源基本配置 ====================
# MySQL驱动类名
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据库连接URL
spring.datasource.url=jdbc:mysql://localhost:3306/webchat?serverTimezone=Hongkong&useAffectedRows=true&characterEncoding=utf-8
# 数据库用户名
spring.datasource.username=root
# 数据库密码
spring.datasource.password=rootmysql
# ==================== HikariCP连接池配置 ====================
# 指定使用HikariCP连接池（Spring Boot 3默认，可省略）
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# 连接池名称，便于日志识别和监控
spring.datasource.hikari.pool-name=WebChatHikariCP
# 连接池最大连接数（默认10）
# 根据应用并发量调整，一般设置为CPU核心数*2到CPU核心数*4
spring.datasource.hikari.maximum-pool-size=20
# 连接池最小空闲连接数（默认与maximum-pool-size相同）
# 建议设置为最大连接数的1/4到1/2
spring.datasource.hikari.minimum-idle=5
# 连接超时时间（毫秒，默认30000）
# 客户端等待连接的最大时间
spring.datasource.hikari.connection-timeout=30000
# 连接空闲超时时间（毫秒，默认600000即10分钟）
# 连接在连接池中的最大空闲时间，超过将被释放
spring.datasource.hikari.idle-timeout=600000
# 连接最大生存时间（毫秒，默认1800000即30分钟）
# 连接在连接池中的最大生存时间，防止数据库强制关闭长连接
spring.datasource.hikari.max-lifetime=1800000
# 连接泄漏检测阈值（毫秒，默认0表示禁用）
# 连接被使用超过此时间会打印警告日志，帮助发现连接泄漏
spring.datasource.hikari.leak-detection-threshold=60000
# ==================== HikariCP高级配置 ====================
# 连接初始化SQL语句
# 每次创建新连接时执行的SQL，用于初始化连接状态
spring.datasource.hikari.connection-init-sql=SELECT 1
# 连接测试查询语句（现代数据库驱动通常不需要）
# HikariCP会自动使用JDBC4的isValid()方法
# spring.datasource.hikari.connection-test-query=SELECT 1
# 是否自动提交事务（默认true）
spring.datasource.hikari.auto-commit=true
# 事务隔离级别（可选：TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED, TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE）
# 不设置则使用数据库默认级别
# spring.datasource.hikari.transaction-isolation=TRANSACTION_READ_COMMITTED
# 是否只读连接（默认false）
spring.datasource.hikari.read-only=false
# 连接初始化失败超时时间（毫秒，默认1）
# 连接池启动时，如果无法创建初始连接的超时时间
spring.datasource.hikari.initialization-fail-timeout=1
# 是否隔离内部查询（默认false）
# 启用后，HikariCP内部的一些查询会使用独立的连接
spring.datasource.hikari.isolate-internal-queries=false
# 是否允许连接池暂停（默认false）
# 启用后可以通过JMX暂停连接池
spring.datasource.hikari.allow-pool-suspension=false
# 是否注册JMX管理Bean（默认false）
# 启用后可以通过JMX监控连接池状态
spring.datasource.hikari.register-mbeans=true
# 验证超时时间（毫秒，默认5000）
# 连接有效性检查的超时时间
spring.datasource.hikari.validation-timeout=5000

# ==================== Redis 基础配置 ====================
spring.data.redis.host=127.0.0.1
spring.data.redis.port=6379
#spring.data.redis.password=alipassword
spring.data.redis.password=
spring.data.redis.database=0
# 使用 Lettuce 客户端（Spring Boot 3 默认）
spring.data.redis.client-type=lettuce
# 连接池配置（基于 commons-pool2）
# 最大连接数
spring.data.redis.lettuce.pool.max-active=50
# 最大空闲连接
spring.data.redis.lettuce.pool.max-idle=20
# 最小空闲连接
spring.data.redis.lettuce.pool.min-idle=5
# 获取连接的最大等待时间（ms）
spring.data.redis.lettuce.pool.max-wait=5000

# ==================== Mybatis Plus配置 ====================
mybatis-plus.global-config.banner=false
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# ==================== Jackson配置 ====================
spring.jackson.default-property-inclusion=NON_NULL

# ==================== SaToken配置 ====================
sa-token.is-print=false
# token 名称（同时也是 cookie 名称）
sa-token.token-name=Authorization
# token 有效期（单位：秒） 默认30天，-1 代表永久有效
sa-token.timeout=2592000
# token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
sa-token.active-timeout=604800
# 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
sa-token.is-concurrent=false
# 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
sa-token.is-share=true
# token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
sa-token.token-style=uuid
# 是否输出操作日志
sa-token.is-log=true
sa-token.token-prefix=Bearer

# ==================== Knife4j API文档配置 ====================
# 启用 Knife4j
knife4j.enable=true
# 设置编码
knife4j.setting.charset=UTF-8
# 设置语言为中文
knife4j.setting.language=zh_cn

# ==================== SpringDoc OpenAPI 配置 ====================
# Swagger UI 路径
springdoc.swagger-ui.path=/swagger-ui.html
# 接口排序
springdoc.swagger-ui.tags-sorter=alpha
springdoc.swagger-ui.operations-sorter=alpha
# API 文档路径
springdoc.api-docs.path=/v3/api-docs
springdoc.group-configs[0].group=default
springdoc.group-configs[0].paths-to-match=/**
springdoc.group-configs[0].packages-to-scan=com.kedaya.webchatbackend.controller
# 扫描包路径
#springdoc.packages-to-scan=com.kedaya.webchatbackend.controller




